#include <iostream>
#include <list>//including header files

using namespace std;//using namespace

class Graph//graph class
{
    int Vertices;//vertice variable. stores Number of vertices
    list<int>* adjLists;//adjacency list
    bool* visited;//pointer to mark the vertice which have been visited

    public://public access type
        Graph(int vertices);
        void addEdge(int src, int dest);
        void BFS(int startVertex);//function declarations
};//end of class


Graph::Graph(int vertices)//creating graph, takes 1 arg, acts as a constructor
{
    Vertices = vertices;
    adjLists = new list<int>[vertices];
}//end of constructor

void Graph::addEdge(int src, int dest)//Function to add edges--> Edges refer to the connectivity between vertices
{
    adjLists[src].push_back(dest);
    adjLists[dest].push_back(src);//pushing
}//end of add edge method


void Graph::BFS(int start)//function for BFS traversal, takes starting point
{
    visited = new bool[Vertices];

    for (int i = 0; i < Vertices; i++)//marking all the vertice as not visited
    {
          visited[i] = false;
    }

    list<int> queue;//list queue
    visited[start] = true;//marking starting vertex as visited
    queue.push_back(start);//pushing to queue
    list<int>::iterator i;

    while (!queue.empty())//looping till the queue is not empty
    {
        int current= queue.front();//getting front from queue as current index
        cout << current << "\n";//printing result
        queue.pop_front();//pop

        for (i = adjLists[current].begin(); i != adjLists[current].end(); ++i)
        {
            int adjVertex = *i;
            if (!visited[adjVertex])
            {
                visited[adjVertex] = true;
                queue.push_back(adjVertex);
            }
        }
    }
}//end of function

int main()//main function, execution starts here--> SHOULD NOT BE INCLUDED IN GRAPH.H FILE
{
    Graph graph(4);//create graph object, passing number of vertics

    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 2);
    graph.addEdge(2, 0);
    graph.addEdge(2, 3);
    graph.addEdge(3, 3);//adding vertex & edge
    graph.BFS(2);//calling BFS Function

    return 0;
}
